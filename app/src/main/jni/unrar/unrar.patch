diff -u before/rdwrfn.cpp after/rdwrfn.cpp
--- before/rdwrfn.cpp	2024-11-05 21:23:24.000000000 +0900
+++ after/rdwrfn.cpp	2024-11-27 22:20:55.187715800 +0900
@@ -72,38 +72,19 @@

     if (UnpackFromMemory)
     {
-      memcpy(Addr,UnpackFromMemoryAddr,UnpackFromMemorySize);
-      ReadSize=(int)UnpackFromMemorySize;
-      UnpackFromMemorySize=0;
-    }
-    else
-    {
-      size_t SizeToRead=((int64)Count>UnpPackedLeft) ? (size_t)UnpPackedLeft:Count;
-      if (SizeToRead > 0)
-      {
-        if (UnpVolume && Decryption && (int64)Count>UnpPackedLeft)
-        {
-          // We need aligned blocks for decryption and we want "Keep broken
-          // files" to work efficiently with missing encrypted volumes.
-          // So for last data block in volume we adjust the size to read to
-          // next equal or smaller block producing aligned total block size.
-          // So we'll ask for next volume only when processing few unaligned
-          // bytes left in the end, when most of data is already extracted.
-          size_t NewTotalRead = TotalRead + SizeToRead;
-          size_t Adjust = NewTotalRead - (NewTotalRead  & ~CRYPT_BLOCK_MASK);
-          size_t NewSizeToRead = SizeToRead - Adjust;
-          if ((int)NewSizeToRead > 0)
-            SizeToRead = NewSizeToRead;
-        }
-
-        if (!SrcFile->IsOpened())
-          return -1;
-        ReadSize=SrcFile->Read(ReadAddr,SizeToRead);
-        FileHeader *hd=SubHead!=NULL ? SubHead:&SrcArc->FileHead;
-        if (!NoFileHeader && hd->SplitAfter)
-          PackedDataHash.Update(ReadAddr,ReadSize);
+      size_t SizeToRead = ((int64)Count > UnpPackedSize) ? (size_t)UnpPackedSize : Count;
+
+      // SizeToReadが残UnpackFromMemorySizeより大きいとアクセスエラーが発生する？
+      if (SizeToRead > UnpackFromMemorySize) {
+        SizeToRead = (size_t)UnpackFromMemorySize;
       }
+
+      memcpy( Addr, UnpackFromMemoryAddr, SizeToRead );
+      ReadSize = (int)SizeToRead;
+      UnpackFromMemorySize -= SizeToRead;
+      UnpackFromMemoryAddr += SizeToRead;
     }
+    else abort();
     CurUnpRead+=ReadSize;
     TotalRead+=ReadSize;
 #ifndef NOVOLUME
@@ -113,31 +94,8 @@
     Count-=ReadSize;
 #endif
     UnpPackedLeft-=ReadSize;
-
-    // Do not ask for next volume if we read something from current volume.
-    // If next volume is missing, we need to process all data from current
-    // volume before aborting. It helps to recover all possible data
-    // in "Keep broken files" mode. But if we process encrypted data,
-    // we ask for next volume also if we have non-aligned encryption block.
-    // Since we adjust data size for decryption earlier above,
-    // it does not hurt "Keep broken files" mode efficiency.
-    if (UnpVolume && UnpPackedLeft == 0 &&
-        (ReadSize==0 || Decryption && (TotalRead & CRYPT_BLOCK_MASK) != 0) )
-    {
-#ifndef NOVOLUME
-      if (!MergeArchive(*SrcArc,this,true,CurrentCommand))
-#endif
-      {
-        NextVolumeMissing=true;
-        return -1;
-      }
-    }
-    else
-      break;
+    break;
   }
-  Archive *SrcArc=(Archive *)SrcFile;
-  if (SrcArc!=NULL)
-    ShowUnpRead(SrcArc->NextBlockPos-UnpPackedSize+CurUnpRead,TotalArcSize);
   if (ReadSize!=-1)
   {
     ReadSize=TotalRead;
@@ -146,7 +104,6 @@
       Decrypt->DecryptBlock(Addr,ReadSize);
 #endif
   }
-  Wait();
   return ReadSize;
 }

@@ -181,14 +138,11 @@
       UnpackToMemorySize-=Count;
     }
   }
-  else
-    if (!TestMode)
-      DestFile->Write(Addr,Count);
+  else abort();
   CurUnpWrite+=Count;
   if (!SkipUnpCRC)
     UnpHash.Update(Addr,Count);
   ShowUnpWrite();
-  Wait();
 }


@@ -196,26 +150,6 @@



-void ComprDataIO::ShowUnpRead(int64 ArcPos,int64 ArcSize)
-{
-  if (ShowProgress && SrcFile!=NULL)
-  {
-    // Important when processing several archives or multivolume archive.
-    ArcPos+=ProcessedArcSize;
-
-    Archive *SrcArc=(Archive *)SrcFile;
-    CommandData *Cmd=SrcArc->GetCommandData();
-
-    int CurPercent=ToPercent(ArcPos,ArcSize);
-    if (!Cmd->DisablePercentage && CurPercent!=LastPercent)
-    {
-      uiExtractProgress(CurUnpWrite,SrcArc->FileHead.UnpSize,ArcPos,ArcSize);
-      LastPercent=CurPercent;
-    }
-  }
-}
-
-
 void ComprDataIO::ShowUnpWrite()
 {
 }
@@ -287,40 +221,9 @@
 }


-// Extraction progress is based on the position in archive and we adjust
-// the total archives size here, so trailing blocks do not prevent progress
-// reaching 100% at the end of extraction. Alternatively we could print "100%"
-// after completing the entire archive extraction, but then we would need
-// to take into account possible messages like the checksum error after
-// last file percent progress.
-void ComprDataIO::AdjustTotalArcSize(Archive *Arc)
-{
-  // If we know a position of QO or RR blocks, use them to adjust the total
-  // packed size to beginning of these blocks. Earlier we already calculated
-  // the total size based on entire archive sizes. We also set LastArcSize
-  // to start of first trailing block, to add it later to ProcessedArcSize.
-  uint64 ArcLength=Arc->IsSeekable() ? Arc->FileLength() : 0;
-  // QO is always preceding RR record.
-  // Also we check QO and RR to be less than archive length to prevent
-  // negative "ArcLength-LastArcSize" and possible signed integer overflow
-  // when calculating TotalArcSize.
-  if (Arc->MainHead.QOpenOffset>0 && Arc->MainHead.QOpenOffset<ArcLength)
-    LastArcSize=Arc->MainHead.QOpenOffset;
-  else
-    if (Arc->MainHead.RROffset>0 && Arc->MainHead.RROffset<ArcLength)
-      LastArcSize=Arc->MainHead.RROffset;
-    else
-    {
-      // If neither QO nor RR are found, exclude the approximate size of
-      // end of archive block.
-      // We select EndBlock to be larger than typical 8 bytes HEAD_ENDARC,
-      // but to not exceed the smallest 22 bytes HEAD_FILE with 1 byte file
-      // name, so we do not have two files with 100% at the end of archive.
-      const uint EndBlock=23;
-
-      if (ArcLength>EndBlock)
-        LastArcSize=ArcLength-EndBlock;
-    }
-
-  TotalArcSize-=ArcLength-LastArcSize;
+void ComprDataIO::SetUnpackFromMemory(byte *Addr,uint Size)
+{
+  UnpackFromMemory=true;
+  UnpackFromMemoryAddr=Addr;
+  UnpackFromMemorySize=Size;
 }
diff -u before/rdwrfn.hpp after/rdwrfn.hpp
--- before/rdwrfn.hpp	2024-11-05 21:23:24.000000000 +0900
+++ after/rdwrfn.hpp	2024-11-27 22:07:22.439166900 +0900
@@ -70,6 +70,7 @@
          const byte *Salt,const byte *InitV,uint Lg2Cnt,byte *HashKey,byte *PswCheck);
     void SetCmt13Encryption();
     void SetUnpackToMemory(byte *Addr,uint Size);
+    void SetUnpackFromMemory(byte *Addr,uint Size);
     void SetCurrentCommand(wchar Cmd) {CurrentCommand=Cmd;}
     void AdjustTotalArcSize(Archive *Arc);

diff -u before/system.cpp after/system.cpp
--- before/system.cpp	2024-11-05 21:23:25.000000000 +0900
+++ after/system.cpp	2024-11-27 23:10:19.942840200 +0900
@@ -77,26 +77,6 @@



-void Wait()
-{
-  if (ErrHandler.UserBreak)
-    ErrHandler.Exit(RARX_USERBREAK);
-#if defined(_WIN_ALL) && !defined(SFX_MODULE)
-  if (SleepTime!=0)
-  {
-    static clock_t LastTime=MonoClock();
-    if (MonoClock()-LastTime>10*CLOCKS_PER_SEC/1000)
-    {
-      Sleep(SleepTime);
-      LastTime=MonoClock();
-    }
-  }
-#endif
-#if defined(_WIN_ALL)
-  // Reset system sleep timer to prevent system going sleep.
-  SetThreadExecutionState(ES_SYSTEM_REQUIRED);
-#endif
-}



diff -u before/system.hpp after/system.hpp
--- before/system.hpp	2024-11-05 21:23:25.000000000 +0900
+++ after/system.hpp	2024-11-27 23:10:17.378911000 +0900
@@ -20,7 +20,6 @@
 void InitSystemOptions(int SleepTime);
 void SetPriority(int Priority);
 clock_t MonoClock();
-void Wait();
 bool EmailFile(const std::wstring &FileName,std::wstring MailToW);
 #ifdef _WIN_ALL
 bool SetPrivilege(LPCTSTR PrivName);
diff -u before/timefn.cpp after/timefn.cpp
--- before/timefn.cpp	2024-11-05 21:23:25.000000000 +0900
+++ after/timefn.cpp	2024-11-27 22:06:14.088058300 +0900
@@ -327,7 +327,11 @@
 #ifndef SFX_MODULE
 const wchar *GetMonthName(uint Month)
 {
-  return uiGetMonthName(Month);
+  static MSGID MonthID[12]={
+    MMonthJan,MMonthFeb,MMonthMar,MMonthApr,MMonthMay,MMonthJun,
+    MMonthJul,MMonthAug,MMonthSep,MMonthOct,MMonthNov,MMonthDec
+  };
+  return MonthID[Month];
 }
 #endif

