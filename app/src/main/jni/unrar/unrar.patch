diff --git a/rdwrfn.cpp b/rdwrfn.cpp
index fa71376..ab37731 100644
--- a/rdwrfn.cpp
+++ b/rdwrfn.cpp
@@ -68,42 +68,15 @@ int ComprDataIO::UnpRead(byte *Addr,size_t Count)
   ReadAddr=Addr;
   while (Count > 0)
   {
-    Archive *SrcArc=(Archive *)SrcFile;
-
     if (UnpackFromMemory)
     {
-      memcpy(Addr,UnpackFromMemoryAddr,UnpackFromMemorySize);
-      ReadSize=(int)UnpackFromMemorySize;
-      UnpackFromMemorySize=0;
-    }
-    else
-    {
-      size_t SizeToRead=((int64)Count>UnpPackedLeft) ? (size_t)UnpPackedLeft:Count;
-      if (SizeToRead > 0)
-      {
-        if (UnpVolume && Decryption && (int64)Count>UnpPackedLeft)
-        {
-          // We need aligned blocks for decryption and we want "Keep broken
-          // files" to work efficiently with missing encrypted volumes.
-          // So for last data block in volume we adjust the size to read to
-          // next equal or smaller block producing aligned total block size.
-          // So we'll ask for next volume only when processing few unaligned
-          // bytes left in the end, when most of data is already extracted.
-          size_t NewTotalRead = TotalRead + SizeToRead;
-          size_t Adjust = NewTotalRead - (NewTotalRead  & ~CRYPT_BLOCK_MASK);
-          size_t NewSizeToRead = SizeToRead - Adjust;
-          if ((int)NewSizeToRead > 0)
-            SizeToRead = NewSizeToRead;
-        }
-
-        if (!SrcFile->IsOpened())
-          return -1;
-        ReadSize=SrcFile->Read(ReadAddr,SizeToRead);
-        FileHeader *hd=SubHead!=NULL ? SubHead:&SrcArc->FileHead;
-        if (!NoFileHeader && hd->SplitAfter)
-          PackedDataHash.Update(ReadAddr,ReadSize);
-      }
+      size_t SizeToRead = ((int64)Count > UnpPackedSize) ? (size_t)UnpPackedSize : Count;
+      memcpy( Addr, UnpackFromMemoryAddr, SizeToRead );
+      ReadSize = (int)SizeToRead;
+      UnpackFromMemorySize -= SizeToRead;
+      UnpackFromMemoryAddr += SizeToRead;
     }
+    else abort();
     CurUnpRead+=ReadSize;
     TotalRead+=ReadSize;
 #ifndef NOVOLUME
@@ -113,31 +86,8 @@ int ComprDataIO::UnpRead(byte *Addr,size_t Count)
     Count-=ReadSize;
 #endif
     UnpPackedLeft-=ReadSize;
-
-    // Do not ask for next volume if we read something from current volume.
-    // If next volume is missing, we need to process all data from current
-    // volume before aborting. It helps to recover all possible data
-    // in "Keep broken files" mode. But if we process encrypted data,
-    // we ask for next volume also if we have non-aligned encryption block.
-    // Since we adjust data size for decryption earlier above,
-    // it does not hurt "Keep broken files" mode efficiency.
-    if (UnpVolume && UnpPackedLeft == 0 && 
-        (ReadSize==0 || Decryption && (TotalRead & CRYPT_BLOCK_MASK) != 0) )
-    {
-#ifndef NOVOLUME
-      if (!MergeArchive(*SrcArc,this,true,CurrentCommand))
-#endif
-      {
-        NextVolumeMissing=true;
-        return -1;
-      }
-    }
-    else
-      break;
+    break;
   }
-  Archive *SrcArc=(Archive *)SrcFile;
-  if (SrcArc!=NULL)
-    ShowUnpRead(SrcArc->NextBlockPos-UnpPackedSize+CurUnpRead,TotalArcSize);
   if (ReadSize!=-1)
   {
     ReadSize=TotalRead;
@@ -146,7 +96,6 @@ int ComprDataIO::UnpRead(byte *Addr,size_t Count)
       Decrypt->DecryptBlock(Addr,ReadSize);
 #endif
   }
-  Wait();
   return ReadSize;
 }
 
@@ -181,14 +130,11 @@ void ComprDataIO::UnpWrite(byte *Addr,size_t Count)
       UnpackToMemorySize-=Count;
     }
   }
-  else
-    if (!TestMode)
-      DestFile->Write(Addr,Count);
+  else abort();
   CurUnpWrite+=Count;
   if (!SkipUnpCRC)
     UnpHash.Update(Addr,Count);
   ShowUnpWrite();
-  Wait();
 }
 
 
@@ -196,24 +142,6 @@ void ComprDataIO::UnpWrite(byte *Addr,size_t Count)
 
 
 
-void ComprDataIO::ShowUnpRead(int64 ArcPos,int64 ArcSize)
-{
-  if (ShowProgress && SrcFile!=NULL)
-  {
-    // Important when processing several archives or multivolume archive.
-    ArcPos+=ProcessedArcSize;
-
-    Archive *SrcArc=(Archive *)SrcFile;
-    CommandData *Cmd=SrcArc->GetCommandData();
-
-    int CurPercent=ToPercent(ArcPos,ArcSize);
-    if (!Cmd->DisablePercentage && CurPercent!=LastPercent)
-    {
-      uiExtractProgress(CurUnpWrite,SrcArc->FileHead.UnpSize,ArcPos,ArcSize);
-      LastPercent=CurPercent;
-    }
-  }
-}
 
 
 void ComprDataIO::ShowUnpWrite()
@@ -287,36 +215,9 @@ void ComprDataIO::SetUnpackToMemory(byte *Addr,uint Size)
 }
 
 
-// Extraction progress is based on the position in archive and we adjust 
-// the total archives size here, so trailing blocks do not prevent progress
-// reaching 100% at the end of extraction. Alternatively we could print "100%"
-// after completing the entire archive extraction, but then we would need
-// to take into account possible messages like the checksum error after
-// last file percent progress.
-void ComprDataIO::AdjustTotalArcSize(Archive *Arc)
+void ComprDataIO::SetUnpackFromMemory(byte *Addr,uint Size)
 {
-  // If we know a position of QO or RR blocks, use them to adjust the total
-  // packed size to beginning of these blocks. Earlier we already calculated
-  // the total size based on entire archive sizes. We also set LastArcSize
-  // to start of first trailing block, to add it later to ProcessedArcSize.
-  int64 ArcLength=Arc->IsSeekable() ? Arc->FileLength() : 0;
-  if (Arc->MainHead.QOpenOffset!=0) // QO is always preceding RR record.
-    LastArcSize=Arc->MainHead.QOpenOffset;
-  else
-    if (Arc->MainHead.RROffset!=0)
-      LastArcSize=Arc->MainHead.RROffset;
-    else
-    {
-      // If neither QO nor RR are found, exclude the approximate size of
-      // end of archive block.
-      // We select EndBlock to be larger than typical 8 bytes HEAD_ENDARC,
-      // but to not exceed the smallest 22 bytes HEAD_FILE with 1 byte file
-      // name, so we do not have two files with 100% at the end of archive.
-      const uint EndBlock=23;
-
-      if (ArcLength>EndBlock)
-        LastArcSize=ArcLength-EndBlock;
-    }
-
-  TotalArcSize-=ArcLength-LastArcSize;
+  UnpackFromMemory=true;
+  UnpackFromMemoryAddr=Addr;
+  UnpackFromMemorySize=Size;
 }
diff --git a/rdwrfn.hpp b/rdwrfn.hpp
index 3060a0f..aec83cb 100644
--- a/rdwrfn.hpp
+++ b/rdwrfn.hpp
@@ -75,6 +75,7 @@ class ComprDataIO
     void SetAV15Encryption();
     void SetCmt13Encryption();
     void SetUnpackToMemory(byte *Addr,uint Size);
+    void SetUnpackFromMemory(byte *Addr,uint Size);
     void SetCurrentCommand(wchar Cmd) {CurrentCommand=Cmd;}
     void AdjustTotalArcSize(Archive *Arc);
 
diff --git a/timefn.cpp b/timefn.cpp
index 0abf49d..34e558b 100644
--- a/timefn.cpp
+++ b/timefn.cpp
@@ -329,7 +329,11 @@ void RarTime::Adjust(int64 ns)
 #ifndef SFX_MODULE
 const wchar *GetMonthName(int Month)
 {
-  return uiGetMonthName(Month);
+  static MSGID MonthID[12]={
+      MMonthJan,MMonthFeb,MMonthMar,MMonthApr,MMonthMay,MMonthJun,
+      MMonthJul,MMonthAug,MMonthSep,MMonthOct,MMonthNov,MMonthDec
+  };
+  return MonthID[Month];
 }
 #endif
 
